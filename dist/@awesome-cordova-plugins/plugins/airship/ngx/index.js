import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordovaInstance, instancePropertyGet, instancePropertySet, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
var Airship = /** @class */ (function (_super) {
    __extends(Airship, _super);
    function Airship() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Call after platform ready
     */
    Airship.prototype.initialize = function () {
        this.channel = new AirshipChannel();
        this.contact = new AirshipContact();
        this.push = new AirshipPush();
    };
    Airship.prototype.takeOff = function (config) { return cordova(this, "takeOff", { "sync": true }, arguments); };
    Airship.prototype.isFlying = function () { return cordova(this, "isFlying", {}, arguments); };
    Airship.prototype.onDeepLink = function () { return cordova(this, "onDeepLink", { "observable": true }, arguments); };
    Airship.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: Airship, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
    Airship.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: Airship });
    Airship.pluginName = "Airship";
    Airship.plugin = "@ua/cordova-airship";
    Airship.pluginRef = "Airship";
    Airship.repo = "https://www.npmjs.com/package/@ua/cordova-airship";
    Airship.install = "ionic cordova plugin add @ua/cordova-airship";
    Airship.platforms = ["Android", "iOS"];
    Airship = __decorate([], Airship);
    return Airship;
}(AwesomeCordovaNativePlugin));
export { Airship };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: Airship, decorators: [{
            type: Injectable
        }], propDecorators: { takeOff: [], isFlying: [], onDeepLink: [] } });
/**
 * iOS options
 */
export var iOS;
(function (iOS) {
    /**
     * Enum of notification options. iOS only.
     */
    var NotificationOption;
    (function (NotificationOption) {
        /**
         * Alerts.
         */
        NotificationOption["Alert"] = "alert";
        /**
         * Sounds.
         */
        NotificationOption["Sound"] = "sound";
        /**
         * Badges.
         */
        NotificationOption["Badge"] = "badge";
        /**
         * Car play.
         */
        NotificationOption["CarPlay"] = "car_play";
        /**
         * Critical Alert.
         */
        NotificationOption["CriticalAlert"] = "critical_alert";
        /**
         * Provides app notification settings.
         */
        NotificationOption["ProvidesAppNotificationSettings"] = "provides_app_notification_settings";
        /**
         * Provisional.
         */
        NotificationOption["Provisional"] = "provisional";
    })(NotificationOption = iOS.NotificationOption || (iOS.NotificationOption = {}));
    /**
     * Enum of foreground notification options.
     */
    var ForegroundPresentationOption;
    (function (ForegroundPresentationOption) {
        /**
         * Play the sound associated with the notification.
         */
        ForegroundPresentationOption["Sound"] = "sound";
        /**
         * Apply the notification's badge value to the app’s icon.
         */
        ForegroundPresentationOption["Badge"] = "badge";
        /**
         * Show the notification in Notification Center. On iOS 13 an older,
         * this will also show the notification as a banner.
         */
        ForegroundPresentationOption["List"] = "list";
        /**
         * Present the notification as a banner. On iOS 13 an older,
         * this will also show the notification in the Notification Center.
         */
        ForegroundPresentationOption["Banner"] = "banner";
    })(ForegroundPresentationOption = iOS.ForegroundPresentationOption || (iOS.ForegroundPresentationOption = {}));
    /**
     * Enum of authorized notification options.
     */
    var AuthorizedNotificationSetting;
    (function (AuthorizedNotificationSetting) {
        /**
         * Alerts.
         */
        AuthorizedNotificationSetting["Alert"] = "alert";
        /**
         * Sounds.
         */
        AuthorizedNotificationSetting["Sound"] = "sound";
        /**
         * Badges.
         */
        AuthorizedNotificationSetting["Badge"] = "badge";
        /**
         * CarPlay.
         */
        AuthorizedNotificationSetting["CarPlay"] = "car_play";
        /**
         * Lock screen.
         */
        AuthorizedNotificationSetting["LockScreen"] = "lock_screen";
        /**
         * Notification center.
         */
        AuthorizedNotificationSetting["NotificationCenter"] = "notification_center";
        /**
         * Critical alert.
         */
        AuthorizedNotificationSetting["CriticalAlert"] = "critical_alert";
        /**
         * Announcement.
         */
        AuthorizedNotificationSetting["Announcement"] = "announcement";
        /**
         * Scheduled delivery.
         */
        AuthorizedNotificationSetting["ScheduledDelivery"] = "scheduled_delivery";
        /**
         * Time sensitive.
         */
        AuthorizedNotificationSetting["TimeSensitive"] = "time_sensitive";
    })(AuthorizedNotificationSetting = iOS.AuthorizedNotificationSetting || (iOS.AuthorizedNotificationSetting = {}));
    /**
     * Enum of authorized status.
     */
    var AuthorizedNotificationStatus;
    (function (AuthorizedNotificationStatus) {
        /**
         * Not determined.
         */
        AuthorizedNotificationStatus["NotDetermined"] = "not_determined";
        /**
         * Denied.
         */
        AuthorizedNotificationStatus["Denied"] = "denied";
        /**
         * Authorized.
         */
        AuthorizedNotificationStatus["Authorized"] = "authorized";
        /**
         * Provisional.
         */
        AuthorizedNotificationStatus["Provisional"] = "provisional";
        /**
         * Ephemeral.
         */
        AuthorizedNotificationStatus["Ephemeral"] = "ephemeral";
    })(AuthorizedNotificationStatus = iOS.AuthorizedNotificationStatus || (iOS.AuthorizedNotificationStatus = {}));
})(iOS || (iOS = {}));
/**
 * Enum of authorized Features.
 */
export var Feature;
(function (Feature) {
    Feature["InAppAutomation"] = "in_app_automation";
    Feature["MessageCenter"] = "message_center";
    Feature["Push"] = "push";
    Feature["Analytics"] = "analytics";
    Feature["TagsAndAttributes"] = "tags_and_attributes";
    Feature["Contacts"] = "contacts";
})(Feature || (Feature = {}));
/**
 * All available features.
 */
export var FEATURES_ALL = Object.values(Feature);
/**
 * Subscription Scope types.
 */
export var SubscriptionScope;
(function (SubscriptionScope) {
    SubscriptionScope["App"] = "app";
    SubscriptionScope["Web"] = "web";
    SubscriptionScope["Sms"] = "sms";
    SubscriptionScope["Email"] = "email";
})(SubscriptionScope || (SubscriptionScope = {}));
var AirshipPush = /** @class */ (function () {
    function AirshipPush() {
        this._objectInstance = window.Airship.push;
    }
    AirshipPush.prototype.setUserNotificationsEnabled = function (enabled) { return cordovaInstance(this, "setUserNotificationsEnabled", {}, arguments); };
    AirshipPush.prototype.isUserNotificationsEnabled = function () { return cordovaInstance(this, "isUserNotificationsEnabled", {}, arguments); };
    AirshipPush.prototype.getNotificationStatus = function () { return cordovaInstance(this, "getNotificationStatus", {}, arguments); };
    /**
     * Event when the notification status has changed.
     */
    AirshipPush.prototype.onNotificationStatusChanged = function () {
        return this.listenerToObservable('onNotificationStatusChanged');
    };
    AirshipPush.prototype.getPushToken = function () { return cordovaInstance(this, "getPushToken", {}, arguments); };
    AirshipPush.prototype.getActiveNotifications = function () { return cordovaInstance(this, "getActiveNotifications", {}, arguments); };
    AirshipPush.prototype.clearNotifications = function () { return cordovaInstance(this, "clearNotifications", {}, arguments); };
    AirshipPush.prototype.clearNotification = function (identifier) { return cordovaInstance(this, "clearNotification", {}, arguments); };
    /**
     * Push received listener.
     */
    AirshipPush.prototype.onPushReceived = function () {
        return this.listenerToObservable('onPushReceived');
    };
    /**
     * Notification response listener.
     */
    AirshipPush.prototype.onNotificationResponse = function () {
        return this.listenerToObservable('onNotificationResponse');
    };
    /**
     * Push token listener.
     */
    AirshipPush.prototype.onPushTokenReceived = function () {
        return this.listenerToObservable('onPushTokenReceived');
    };
    AirshipPush.prototype.listenerToObservable = function (fnName) {
        var _this = this;
        return new Observable(function (observer) {
            var cans = _this._objectInstance[fnName](observer.next.bind(observer));
            return function () {
                console.log('cancel', fnName);
                cans.cancel();
            };
        });
    };
    Object.defineProperty(AirshipPush.prototype, "android", {
        get: function () { return instancePropertyGet(this, "android"); },
        set: function (value) { instancePropertySet(this, "android", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AirshipPush.prototype, "ios", {
        get: function () { return instancePropertyGet(this, "ios"); },
        set: function (value) { instancePropertySet(this, "ios", value); },
        enumerable: false,
        configurable: true
    });
    return AirshipPush;
}());
export { AirshipPush };
var AirshipContact = /** @class */ (function () {
    function AirshipContact() {
        this._objectInstance = window.Airship.contact;
    }
    AirshipContact.prototype.editAttributes = function () { return cordovaInstance(this, "editAttributes", { "sync": true }, arguments); };
    AirshipContact.prototype.editSubscriptionLists = function () { return cordovaInstance(this, "editSubscriptionLists", { "sync": true }, arguments); };
    AirshipContact.prototype.editTagGroups = function () { return cordovaInstance(this, "editTagGroups", { "sync": true }, arguments); };
    AirshipContact.prototype.getNamedUserId = function () { return cordovaInstance(this, "getNamedUserId", {}, arguments); };
    AirshipContact.prototype.getSubscriptionLists = function () { return cordovaInstance(this, "getSubscriptionLists", {}, arguments); };
    AirshipContact.prototype.identify = function (namedUser) { return cordovaInstance(this, "identify", {}, arguments); };
    AirshipContact.prototype.notifyRemoteLogin = function () { return cordovaInstance(this, "notifyRemoteLogin", {}, arguments); };
    AirshipContact.prototype.reset = function () { return cordovaInstance(this, "reset", {}, arguments); };
    return AirshipContact;
}());
export { AirshipContact };
var AirshipChannel = /** @class */ (function () {
    function AirshipChannel() {
        this._objectInstance = window.Airship.channel;
    }
    AirshipChannel.prototype.enableChannelCreation = function () { return cordovaInstance(this, "enableChannelCreation", {}, arguments); };
    AirshipChannel.prototype.editTags = function () { return cordovaInstance(this, "editTags", { "sync": true }, arguments); };
    AirshipChannel.prototype.getTags = function () { return cordovaInstance(this, "getTags", {}, arguments); };
    AirshipChannel.prototype.getChannelId = function () { return cordovaInstance(this, "getChannelId", {}, arguments); };
    AirshipChannel.prototype.getSubscriptionLists = function () { return cordovaInstance(this, "getSubscriptionLists", {}, arguments); };
    AirshipChannel.prototype.editTagGroups = function () { return cordovaInstance(this, "editTagGroups", { "sync": true }, arguments); };
    AirshipChannel.prototype.editAttributes = function () { return cordovaInstance(this, "editAttributes", { "sync": true }, arguments); };
    AirshipChannel.prototype.editSubscriptionLists = function () { return cordovaInstance(this, "editSubscriptionLists", { "sync": true }, arguments); };
    AirshipChannel.prototype.onChannelCreated = function () { return cordovaInstance(this, "onChannelCreated", { "observable": true, "successIndex": 0 }, arguments); };
    return AirshipChannel;
}());
export { AirshipChannel };
//# sourceMappingURL=data:application/json;base64,