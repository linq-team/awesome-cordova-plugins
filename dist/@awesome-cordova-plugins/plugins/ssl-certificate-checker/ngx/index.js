import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import * as i0 from "@angular/core";
var SSLCertificateChecker = /** @class */ (function (_super) {
    __extends(SSLCertificateChecker, _super);
    function SSLCertificateChecker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SSLCertificateChecker.prototype.check = function (serverURL, allowedFingerprint) { return cordova(this, "check", {}, arguments); };
    SSLCertificateChecker.prototype.checkInCertChain = function (serverURL, allowedFingerprint) { return cordova(this, "checkInCertChain", {}, arguments); };
    SSLCertificateChecker.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: SSLCertificateChecker, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
    SSLCertificateChecker.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: SSLCertificateChecker });
    SSLCertificateChecker.pluginName = "SSLCertificateChecker";
    SSLCertificateChecker.plugin = "SSLCertificateChecker-PhoneGap-Plugin";
    SSLCertificateChecker.pluginRef = "SSLCertificateChecker";
    SSLCertificateChecker.repo = "https://github.com/EddyVerbruggen/SSLCertificateChecker-PhoneGap-Plugin";
    SSLCertificateChecker.platforms = ["Android", "iOS"];
    SSLCertificateChecker = __decorate([], SSLCertificateChecker);
    return SSLCertificateChecker;
}(AwesomeCordovaNativePlugin));
export { SSLCertificateChecker };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: SSLCertificateChecker, decorators: [{
            type: Injectable
        }], propDecorators: { check: [], checkInCertChain: [] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvc3NsLWNlcnRpZmljYXRlLWNoZWNrZXIvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7OztJQW1DakQseUNBQTBCOzs7O0lBUW5FLHFDQUFLLGFBQUMsU0FBaUIsRUFBRSxrQkFBMEI7SUFjbkQsZ0RBQWdCLGFBQUMsU0FBaUIsRUFBRSxrQkFBMEI7dUhBdEJuRCxxQkFBcUI7MkhBQXJCLHFCQUFxQjs7Ozs7O0lBQXJCLHFCQUFxQixrQkFBckIscUJBQXFCO2dDQXBDbEM7RUFvQzJDLDBCQUEwQjtTQUF4RCxxQkFBcUI7NEZBQXJCLHFCQUFxQjtrQkFEakMsVUFBVTs4QkFTVCxLQUFLLE1BY0wsZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGx1Z2luLCBDb3Jkb3ZhLCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcblxuLyoqXG4gKiBAbmFtZSBTU0xDZXJ0aWZpY2F0ZUNoZWNrZXJcbiAqIEBkZXNjcmlwdGlvblxuICogQ29yZG92YSBwbHVnaW4gdG8gY2hlY2sgU1NMIGNlcnRpZmljYXRlcyBvbiBBbmRyb2lkIGFuZCBpT1MuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBTU0xDZXJ0aWZpY2F0ZUNoZWNrZXIgfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvc3NsLWNlcnRpZmljYXRlLWNoZWNrZXInO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgc3NsQ2VydGlmaWNhdGVDaGVja2VyOiBTU0xDZXJ0aWZpY2F0ZUNoZWNrZXIpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIHRoaXMuc3NsQ2VydGlmaWNhdGVDaGVja2VyLmNoZWNrKHNlcnZlclVSTCwgYWxsb3dlZEZpbmdlcnByaW50KVxuICogICAudGhlbigoKSA9PiBjb25zb2xlLmxvZygnQ2VydGlmaWNhdGUgaXMgdmFsaWQnKSlcbiAqICAgLmNhdGNoKGVycm9yID0+IGNvbnNvbGUuZXJyb3IoJ0NlcnRpZmljYXRlIGlzIGludmFsaWQnLCBlcnJvcikpO1xuICpcbiAqIC4uLlxuICpcbiAqIHRoaXMuc3NsQ2VydGlmaWNhdGVDaGVja2VyLmNoZWNrSW5DZXJ0Q2hhaW4oc2VydmVyVVJMLCBhbGxvd2VkRmluZ2VycHJpbnQpXG4gKiAgIC50aGVuKCgpID0+IGNvbnNvbGUubG9nKCdDZXJ0aWZpY2F0ZSBjaGFpbiBpcyB2YWxpZCcpKVxuICogICAuY2F0Y2goZXJyb3IgPT4gY29uc29sZS5lcnJvcignQ2VydGlmaWNhdGUgY2hhaW4gaXMgaW52YWxpZCcsIGVycm9yKSk7XG4gKlxuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnU1NMQ2VydGlmaWNhdGVDaGVja2VyJyxcbiAgcGx1Z2luOiAnU1NMQ2VydGlmaWNhdGVDaGVja2VyLVBob25lR2FwLVBsdWdpbicsXG4gIHBsdWdpblJlZjogJ1NTTENlcnRpZmljYXRlQ2hlY2tlcicsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vRWRkeVZlcmJydWdnZW4vU1NMQ2VydGlmaWNhdGVDaGVja2VyLVBob25lR2FwLVBsdWdpbicsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTU0xDZXJ0aWZpY2F0ZUNoZWNrZXIgZXh0ZW5kcyBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIFNTTCBjZXJ0aWZpY2F0ZSBvZiB0aGUgc3BlY2lmaWVkIHNlcnZlciBtYXRjaGVzIHRoZSBwcm92aWRlZCBmaW5nZXJwcmludC5cbiAgICogQHBhcmFtIHNlcnZlclVSTCAtIFRoZSBVUkwgb2YgdGhlIHNlcnZlciB0byBjaGVjay5cbiAgICogQHBhcmFtIGFsbG93ZWRGaW5nZXJwcmludCAtIFRoZSBhbGxvd2VkIFNIQS0xIGZpbmdlcnByaW50LlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPHZvaWQ+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIGlmIHRoZSBjZXJ0aWZpY2F0ZSBpcyB2YWxpZCwgb3RoZXJ3aXNlIHJlamVjdHMgd2l0aCBhbiBlcnJvci5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgY2hlY2soc2VydmVyVVJMOiBzdHJpbmcsIGFsbG93ZWRGaW5nZXJwcmludDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIChOb3QgcmVjb21tZW5kZWQgaW4gdmVyc2lvbnMgaGlnaGVyIHRoYW4gNC4wLjApXG4gICAqIENoZWNrcyBpZiB0aGUgU1NMIGNlcnRpZmljYXRlIG9mIHRoZSBzcGVjaWZpZWQgc2VydmVyIGlzIGluIHRoZSBjZXJ0aWZpY2F0ZSBjaGFpblxuICAgKiBhbmQgbWF0Y2hlcyB0aGUgcHJvdmlkZWQgZmluZ2VycHJpbnQuXG4gICAqIEBwYXJhbSBzZXJ2ZXJVUkwgLSBUaGUgVVJMIG9mIHRoZSBzZXJ2ZXIgdG8gY2hlY2suXG4gICAqIEBwYXJhbSBhbGxvd2VkRmluZ2VycHJpbnQgLSBUaGUgYWxsb3dlZCBTSEEtMSBmaW5nZXJwcmludC5cbiAgICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyBpZiB0aGUgY2VydGlmaWNhdGUgY2hhaW4gaXMgdmFsaWQsIG90aGVyd2lzZSByZWplY3RzIHdpdGggYW4gZXJyb3IuXG4gICAqIEBkZXByZWNhdGVkIFRoaXMgZnVuY3Rpb24gaXMgY29uc2lkZXJlZCBpbnNlY3VyZS5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgY2hlY2tJbkNlcnRDaGFpbihzZXJ2ZXJVUkw6IHN0cmluZywgYWxsb3dlZEZpbmdlcnByaW50OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==