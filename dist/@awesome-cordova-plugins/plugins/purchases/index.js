var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
export var ATTRIBUTION_NETWORK;
(function (ATTRIBUTION_NETWORK) {
    ATTRIBUTION_NETWORK[ATTRIBUTION_NETWORK["APPLE_SEARCH_ADS"] = 0] = "APPLE_SEARCH_ADS";
    ATTRIBUTION_NETWORK[ATTRIBUTION_NETWORK["ADJUST"] = 1] = "ADJUST";
    ATTRIBUTION_NETWORK[ATTRIBUTION_NETWORK["APPSFLYER"] = 2] = "APPSFLYER";
    ATTRIBUTION_NETWORK[ATTRIBUTION_NETWORK["BRANCH"] = 3] = "BRANCH";
    ATTRIBUTION_NETWORK[ATTRIBUTION_NETWORK["TENJIN"] = 4] = "TENJIN";
    ATTRIBUTION_NETWORK[ATTRIBUTION_NETWORK["FACEBOOK"] = 5] = "FACEBOOK";
})(ATTRIBUTION_NETWORK || (ATTRIBUTION_NETWORK = {}));
export var PURCHASE_TYPE;
(function (PURCHASE_TYPE) {
    /**
     * A type of SKU for in-app products.
     */
    PURCHASE_TYPE["INAPP"] = "inapp";
    /**
     * A type of SKU for subscriptions.
     */
    PURCHASE_TYPE["SUBS"] = "subs";
})(PURCHASE_TYPE || (PURCHASE_TYPE = {}));
/**
 * Enum for billing features.
 * Currently, these are only relevant for Google Play Android users:
 * https://developer.android.com/reference/com/android/billingclient/api/BillingClient.FeatureType
 */
export var BILLING_FEATURE;
(function (BILLING_FEATURE) {
    /**
     * Purchase/query for subscriptions.
     */
    BILLING_FEATURE[BILLING_FEATURE["SUBSCRIPTIONS"] = 0] = "SUBSCRIPTIONS";
    /**
     * Subscriptions update/replace.
     */
    BILLING_FEATURE[BILLING_FEATURE["SUBSCRIPTIONS_UPDATE"] = 1] = "SUBSCRIPTIONS_UPDATE";
    /**
     * Purchase/query for in-app items on VR.
     */
    BILLING_FEATURE[BILLING_FEATURE["IN_APP_ITEMS_ON_VR"] = 2] = "IN_APP_ITEMS_ON_VR";
    /**
     * Purchase/query for subscriptions on VR.
     */
    BILLING_FEATURE[BILLING_FEATURE["SUBSCRIPTIONS_ON_VR"] = 3] = "SUBSCRIPTIONS_ON_VR";
    /**
     * Launch a price change confirmation flow.
     */
    BILLING_FEATURE[BILLING_FEATURE["PRICE_CHANGE_CONFIRMATION"] = 4] = "PRICE_CHANGE_CONFIRMATION";
})(BILLING_FEATURE || (BILLING_FEATURE = {}));
export var REFUND_REQUEST_STATUS;
(function (REFUND_REQUEST_STATUS) {
    /**
     * Apple has received the refund request.
     */
    REFUND_REQUEST_STATUS[REFUND_REQUEST_STATUS["SUCCESS"] = 0] = "SUCCESS";
    /**
     * User canceled submission of the refund request.
     */
    REFUND_REQUEST_STATUS[REFUND_REQUEST_STATUS["USER_CANCELLED"] = 1] = "USER_CANCELLED";
    /**
     * There was an error with the request. See message for more details.
     */
    REFUND_REQUEST_STATUS[REFUND_REQUEST_STATUS["ERROR"] = 2] = "ERROR";
})(REFUND_REQUEST_STATUS || (REFUND_REQUEST_STATUS = {}));
export var PRORATION_MODE;
(function (PRORATION_MODE) {
    PRORATION_MODE[PRORATION_MODE["UNKNOWN_SUBSCRIPTION_UPGRADE_DOWNGRADE_POLICY"] = 0] = "UNKNOWN_SUBSCRIPTION_UPGRADE_DOWNGRADE_POLICY";
    /**
     * Replacement takes effect immediately, and the remaining time will be
     * prorated and credited to the user. This is the current default behavior.
     */
    PRORATION_MODE[PRORATION_MODE["IMMEDIATE_WITH_TIME_PRORATION"] = 1] = "IMMEDIATE_WITH_TIME_PRORATION";
    /**
     * Replacement takes effect immediately, and the billing cycle remains the
     * same. The price for the remaining period will be charged. This option is
     * only available for subscription upgrade.
     */
    PRORATION_MODE[PRORATION_MODE["IMMEDIATE_AND_CHARGE_PRORATED_PRICE"] = 2] = "IMMEDIATE_AND_CHARGE_PRORATED_PRICE";
    /**
     * Replacement takes effect immediately, and the new price will be charged on
     * next recurrence time. The billing cycle stays the same.
     */
    PRORATION_MODE[PRORATION_MODE["IMMEDIATE_WITHOUT_PRORATION"] = 3] = "IMMEDIATE_WITHOUT_PRORATION";
    /**
     * Replacement takes effect immediately, and the user is charged full price
     * of new plan and is given a full billing cycle of subscription,
     * plus remaining prorated time from the old plan.
     */
    PRORATION_MODE[PRORATION_MODE["IMMEDIATE_AND_CHARGE_FULL_PRICE"] = 5] = "IMMEDIATE_AND_CHARGE_FULL_PRICE";
})(PRORATION_MODE || (PRORATION_MODE = {}));
export var PACKAGE_TYPE;
(function (PACKAGE_TYPE) {
    /**
     * A package that was defined with a custom identifier.
     */
    PACKAGE_TYPE["UNKNOWN"] = "UNKNOWN";
    /**
     * A package that was defined with a custom identifier.
     */
    PACKAGE_TYPE["CUSTOM"] = "CUSTOM";
    /**
     * A package configured with the predefined lifetime identifier.
     */
    PACKAGE_TYPE["LIFETIME"] = "LIFETIME";
    /**
     * A package configured with the predefined annual identifier.
     */
    PACKAGE_TYPE["ANNUAL"] = "ANNUAL";
    /**
     * A package configured with the predefined six month identifier.
     */
    PACKAGE_TYPE["SIX_MONTH"] = "SIX_MONTH";
    /**
     * A package configured with the predefined three month identifier.
     */
    PACKAGE_TYPE["THREE_MONTH"] = "THREE_MONTH";
    /**
     * A package configured with the predefined two month identifier.
     */
    PACKAGE_TYPE["TWO_MONTH"] = "TWO_MONTH";
    /**
     * A package configured with the predefined monthly identifier.
     */
    PACKAGE_TYPE["MONTHLY"] = "MONTHLY";
    /**
     * A package configured with the predefined weekly identifier.
     */
    PACKAGE_TYPE["WEEKLY"] = "WEEKLY";
})(PACKAGE_TYPE || (PACKAGE_TYPE = {}));
export var INTRO_ELIGIBILITY_STATUS;
(function (INTRO_ELIGIBILITY_STATUS) {
    /**
     * RevenueCat doesn't have enough information to determine eligibility.
     */
    INTRO_ELIGIBILITY_STATUS[INTRO_ELIGIBILITY_STATUS["INTRO_ELIGIBILITY_STATUS_UNKNOWN"] = 0] = "INTRO_ELIGIBILITY_STATUS_UNKNOWN";
    /**
     * The user is not eligible for a free trial or intro pricing for this product.
     */
    INTRO_ELIGIBILITY_STATUS[INTRO_ELIGIBILITY_STATUS["INTRO_ELIGIBILITY_STATUS_INELIGIBLE"] = 1] = "INTRO_ELIGIBILITY_STATUS_INELIGIBLE";
    /**
     * The user is eligible for a free trial or intro pricing for this product.
     */
    INTRO_ELIGIBILITY_STATUS[INTRO_ELIGIBILITY_STATUS["INTRO_ELIGIBILITY_STATUS_ELIGIBLE"] = 2] = "INTRO_ELIGIBILITY_STATUS_ELIGIBLE";
    /**
     * There is no free trial or intro pricing for this product.
     */
    INTRO_ELIGIBILITY_STATUS[INTRO_ELIGIBILITY_STATUS["INTRO_ELIGIBILITY_STATUS_NO_INTRO_OFFER_EXISTS"] = 3] = "INTRO_ELIGIBILITY_STATUS_NO_INTRO_OFFER_EXISTS";
})(INTRO_ELIGIBILITY_STATUS || (INTRO_ELIGIBILITY_STATUS = {}));
export var LOG_LEVEL;
(function (LOG_LEVEL) {
    LOG_LEVEL["VERBOSE"] = "VERBOSE";
    LOG_LEVEL["DEBUG"] = "DEBUG";
    LOG_LEVEL["INFO"] = "INFO";
    LOG_LEVEL["WARN"] = "WARN";
    LOG_LEVEL["ERROR"] = "ERROR";
})(LOG_LEVEL || (LOG_LEVEL = {}));
/**
 * Enum for in-app message types.
 * This can be used if you disable automatic in-app message from showing automatically.
 * Then, you can pass what type of messages you want to show in the `showInAppMessages`
 * method in PurchasesOriginal.
 */
export var IN_APP_MESSAGE_TYPE;
(function (IN_APP_MESSAGE_TYPE) {
    // Make sure the enum values are in sync with those defined in iOS/Android
    /**
     * In-app messages to indicate there has been a billing issue charging the user.
     */
    IN_APP_MESSAGE_TYPE[IN_APP_MESSAGE_TYPE["BILLING_ISSUE"] = 0] = "BILLING_ISSUE";
    /**
     * iOS-only. This message will show if you increase the price of a subscription and
     * the user needs to opt-in to the increase.
     */
    IN_APP_MESSAGE_TYPE[IN_APP_MESSAGE_TYPE["PRICE_INCREASE_CONSENT"] = 1] = "PRICE_INCREASE_CONSENT";
    /**
     * iOS-only. StoreKit generic messages.
     */
    IN_APP_MESSAGE_TYPE[IN_APP_MESSAGE_TYPE["GENERIC"] = 2] = "GENERIC";
})(IN_APP_MESSAGE_TYPE || (IN_APP_MESSAGE_TYPE = {}));
export var PRODUCT_CATEGORY;
(function (PRODUCT_CATEGORY) {
    /**
     * A type of product for non-subscription.
     */
    PRODUCT_CATEGORY["NON_SUBSCRIPTION"] = "NON_SUBSCRIPTION";
    /**
     * A type of product for subscriptions.
     */
    PRODUCT_CATEGORY["SUBSCRIPTION"] = "SUBSCRIPTION";
    /**
     * A type of product for unknowns.
     */
    PRODUCT_CATEGORY["UNKNOWN"] = "UNKNOWN";
})(PRODUCT_CATEGORY || (PRODUCT_CATEGORY = {}));
/**
 * Recurrence mode for a pricing phase
 */
export var RECURRENCE_MODE;
(function (RECURRENCE_MODE) {
    /**
     * Pricing phase repeats infinitely until cancellation
     */
    RECURRENCE_MODE[RECURRENCE_MODE["INFINITE_RECURRING"] = 1] = "INFINITE_RECURRING";
    /**
     * Pricing phase repeats for a fixed number of billing periods
     */
    RECURRENCE_MODE[RECURRENCE_MODE["FINITE_RECURRING"] = 2] = "FINITE_RECURRING";
    /**
     * Pricing phase does not repeat
     */
    RECURRENCE_MODE[RECURRENCE_MODE["NON_RECURRING"] = 3] = "NON_RECURRING";
})(RECURRENCE_MODE || (RECURRENCE_MODE = {}));
/**
 * Payment mode for offer pricing phases. Google Play only.
 */
export var OFFER_PAYMENT_MODE;
(function (OFFER_PAYMENT_MODE) {
    /**
     * Subscribers don't pay until the specified period ends
     */
    OFFER_PAYMENT_MODE["FREE_TRIAL"] = "FREE_TRIAL";
    /**
     * Subscribers pay up front for a specified period
     */
    OFFER_PAYMENT_MODE["SINGLE_PAYMENT"] = "SINGLE_PAYMENT";
    /**
     * Subscribers pay a discounted amount for a specified number of periods
     */
    OFFER_PAYMENT_MODE["DISCOUNTED_RECURRING_PAYMENT"] = "DISCOUNTED_RECURRING_PAYMENT";
})(OFFER_PAYMENT_MODE || (OFFER_PAYMENT_MODE = {}));
/**
 * Time duration unit for Period.
 */
export var PERIOD_UNIT;
(function (PERIOD_UNIT) {
    PERIOD_UNIT["DAY"] = "DAY";
    PERIOD_UNIT["WEEK"] = "WEEK";
    PERIOD_UNIT["MONTH"] = "MONTH";
    PERIOD_UNIT["YEAR"] = "YEAR";
    PERIOD_UNIT["UNKNOWN"] = "UNKNOWN";
})(PERIOD_UNIT || (PERIOD_UNIT = {}));
var PurchasesOriginal = /** @class */ (function (_super) {
    __extends(PurchasesOriginal, _super);
    function PurchasesOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PurchasesOriginal.prototype.configure = function (apiKey, appUserID, observerMode, userDefaultsSuiteName) {
        if (observerMode === void 0) { observerMode = false; }
        return cordova(this, "configure", { "sync": true }, arguments);
    };
    PurchasesOriginal.prototype.configureWith = function (configuration) { return cordova(this, "configureWith", { "sync": true }, arguments); };
    PurchasesOriginal.prototype.getOfferings = function () { return cordova(this, "getOfferings", {}, arguments); };
    PurchasesOriginal.prototype.getProducts = function (productIdentifiers, type) {
        if (type === void 0) { type = PURCHASE_TYPE.SUBS; }
        return cordova(this, "getProducts", { "successIndex": 1, "errorIndex": 2 }, arguments);
    };
    PurchasesOriginal.prototype.purchaseProduct = function (productIdentifier, upgradeInfo, type) {
        if (type === void 0) { type = PURCHASE_TYPE.SUBS; }
        return cordova(this, "purchaseProduct", { "successIndex": 1, "errorIndex": 2 }, arguments);
    };
    PurchasesOriginal.prototype.purchaseStoreProduct = function (product, googleProductChangeInfo, googleIsPersonalizedPrice) {
        if (googleIsPersonalizedPrice === void 0) { googleIsPersonalizedPrice = false; }
        return cordova(this, "purchaseStoreProduct", { "successIndex": 1, "errorIndex": 2 }, arguments);
    };
    PurchasesOriginal.prototype.purchasePackage = function (aPackage, upgradeInfo, googleProductChangeInfo, googleIsPersonalizedPrice) {
        if (googleIsPersonalizedPrice === void 0) { googleIsPersonalizedPrice = false; }
        return cordova(this, "purchasePackage", { "successIndex": 1, "errorIndex": 2 }, arguments);
    };
    PurchasesOriginal.prototype.purchaseSubscriptionOption = function (subscriptionOption, googleProductChangeInfo, googleIsPersonalizedPrice) {
        if (googleIsPersonalizedPrice === void 0) { googleIsPersonalizedPrice = false; }
        return cordova(this, "purchaseSubscriptionOption", { "successIndex": 1, "errorIndex": 2 }, arguments);
    };
    PurchasesOriginal.prototype.restorePurchases = function () { return cordova(this, "restorePurchases", {}, arguments); };
    PurchasesOriginal.prototype.getAppUserID = function () { return cordova(this, "getAppUserID", { "sync": true }, arguments); };
    PurchasesOriginal.prototype.logIn = function (appUserID) { return cordova(this, "logIn", {}, arguments); };
    PurchasesOriginal.prototype.logOut = function () { return cordova(this, "logOut", {}, arguments); };
    PurchasesOriginal.prototype.getCustomerInfo = function () { return cordova(this, "getCustomerInfo", {}, arguments); };
    PurchasesOriginal.prototype.onCustomerInfoUpdated = function () { return cordova(this, "onCustomerInfoUpdated", { "eventObservable": true, "event": "onCustomerInfoUpdated", "element": "window" }, arguments); };
    PurchasesOriginal.prototype.setDebugLogsEnabled = function (enabled) { return cordova(this, "setDebugLogsEnabled", { "sync": true }, arguments); };
    PurchasesOriginal.prototype.setLogLevel = function (level) { return cordova(this, "setLogLevel", { "sync": true }, arguments); };
    PurchasesOriginal.prototype.setLogHandler = function (logHandler) { return cordova(this, "setLogHandler", { "sync": true }, arguments); };
    PurchasesOriginal.prototype.setSimulatesAskToBuyInSandbox = function (enabled) { return cordova(this, "setSimulatesAskToBuyInSandbox", { "sync": true }, arguments); };
    PurchasesOriginal.prototype.syncPurchases = function () { return cordova(this, "syncPurchases", { "sync": true }, arguments); };
    PurchasesOriginal.prototype.syncObserverModeAmazonPurchase = function (productID, receiptID, amazonUserID, isoCurrencyCode, price) { return cordova(this, "syncObserverModeAmazonPurchase", { "sync": true }, arguments); };
    PurchasesOriginal.prototype.setAutomaticAppleSearchAdsAttributionCollection = function (enabled) { return cordova(this, "setAutomaticAppleSearchAdsAttributionCollection", { "sync": true }, arguments); };
    PurchasesOriginal.prototype.enableAdServicesAttributionTokenCollection = function () { return cordova(this, "enableAdServicesAttributionTokenCollection", { "sync": true }, arguments); };
    PurchasesOriginal.prototype.isAnonymous = function () { return cordova(this, "isAnonymous", { "sync": true }, arguments); };
    PurchasesOriginal.prototype.checkTrialOrIntroductoryPriceEligibility = function (productIdentifiers) { return cordova(this, "checkTrialOrIntroductoryPriceEligibility", {}, arguments); };
    PurchasesOriginal.prototype.addShouldPurchasePromoProductListener = function (shouldPurchasePromoProductListener) { return cordova(this, "addShouldPurchasePromoProductListener", { "sync": true }, arguments); };
    PurchasesOriginal.prototype.removeShouldPurchasePromoProductListener = function (listenerToRemove) { return cordova(this, "removeShouldPurchasePromoProductListener", { "sync": true }, arguments); };
    PurchasesOriginal.prototype.invalidateCustomerInfoCache = function () { return cordova(this, "invalidateCustomerInfoCache", { "sync": true }, arguments); };
    PurchasesOriginal.prototype.presentCodeRedemptionSheet = function () { return cordova(this, "presentCodeRedemptionSheet", { "sync": true }, arguments); };
    PurchasesOriginal.prototype.setAttributes = function (attributes) { return cordova(this, "setAttributes", { "sync": true }, arguments); };
    PurchasesOriginal.prototype.setEmail = function (email) { return cordova(this, "setEmail", { "sync": true }, arguments); };
    PurchasesOriginal.prototype.setPhoneNumber = function (phoneNumber) { return cordova(this, "setPhoneNumber", { "sync": true }, arguments); };
    PurchasesOriginal.prototype.setDisplayName = function (displayName) { return cordova(this, "setDisplayName", { "sync": true }, arguments); };
    PurchasesOriginal.prototype.setPushToken = function (pushToken) { return cordova(this, "setPushToken", { "sync": true }, arguments); };
    PurchasesOriginal.prototype.setAdjustID = function (adjustID) { return cordova(this, "setAdjustID", { "sync": true }, arguments); };
    PurchasesOriginal.prototype.setAppsflyerID = function (appsflyerID) { return cordova(this, "setAppsflyerID", { "sync": true }, arguments); };
    PurchasesOriginal.prototype.setFBAnonymousID = function (fbAnonymousID) { return cordova(this, "setFBAnonymousID", { "sync": true }, arguments); };
    PurchasesOriginal.prototype.setMparticleID = function (mparticleID) { return cordova(this, "setMparticleID", { "sync": true }, arguments); };
    PurchasesOriginal.prototype.setOnesignalID = function (onesignalID) { return cordova(this, "setOnesignalID", { "sync": true }, arguments); };
    PurchasesOriginal.prototype.setAirshipChannelID = function (airshipChannelID) { return cordova(this, "setAirshipChannelID", { "sync": true }, arguments); };
    PurchasesOriginal.prototype.setFirebaseAppInstanceID = function (firebaseAppInstanceID) { return cordova(this, "setFirebaseAppInstanceID", { "sync": true }, arguments); };
    PurchasesOriginal.prototype.setMixpanelDistinctID = function (mixpanelDistinctID) { return cordova(this, "setMixpanelDistinctID", { "sync": true }, arguments); };
    PurchasesOriginal.prototype.setCleverTapID = function (cleverTapID) { return cordova(this, "setCleverTapID", { "sync": true }, arguments); };
    PurchasesOriginal.prototype.setMediaSource = function (mediaSource) { return cordova(this, "setMediaSource", { "sync": true }, arguments); };
    PurchasesOriginal.prototype.setCampaign = function (campaign) { return cordova(this, "setCampaign", { "sync": true }, arguments); };
    PurchasesOriginal.prototype.setAdGroup = function (adGroup) { return cordova(this, "setAdGroup", { "sync": true }, arguments); };
    PurchasesOriginal.prototype.setAd = function (ad) { return cordova(this, "setAd", { "sync": true }, arguments); };
    PurchasesOriginal.prototype.setKeyword = function (keyword) { return cordova(this, "setKeyword", { "sync": true }, arguments); };
    PurchasesOriginal.prototype.setCreative = function (creative) { return cordova(this, "setCreative", { "sync": true }, arguments); };
    PurchasesOriginal.prototype.collectDeviceIdentifiers = function () { return cordova(this, "collectDeviceIdentifiers", { "sync": true }, arguments); };
    PurchasesOriginal.prototype.canMakePayments = function (features) {
        if (features === void 0) { features = []; }
        return cordova(this, "canMakePayments", {}, arguments);
    };
    PurchasesOriginal.prototype.setProxyURL = function (url) { return cordova(this, "setProxyURL", { "sync": true }, arguments); };
    PurchasesOriginal.prototype.beginRefundRequestForActiveEntitlement = function () { return cordova(this, "beginRefundRequestForActiveEntitlement", {}, arguments); };
    PurchasesOriginal.prototype.beginRefundRequestForEntitlement = function (entitlementInfo) { return cordova(this, "beginRefundRequestForEntitlement", {}, arguments); };
    PurchasesOriginal.prototype.beginRefundRequestForProduct = function (storeProduct) { return cordova(this, "beginRefundRequestForProduct", {}, arguments); };
    PurchasesOriginal.prototype.showInAppMessages = function (messageTypes) { return cordova(this, "showInAppMessages", { "sync": true }, arguments); };
    /**
     * Enum for attribution networks
     *
     * @readonly
     * @enum {number}
     */
    PurchasesOriginal.ATTRIBUTION_NETWORK = ATTRIBUTION_NETWORK;
    /**
     * Supported SKU types.
     *
     * @readonly
     * @enum {string}
     */
    PurchasesOriginal.PURCHASE_TYPE = PURCHASE_TYPE;
    /**
     * Supported product categories.
     * @readonly
     * @enum {string}
     */
    PurchasesOriginal.PRODUCT_CATEGORY = PRODUCT_CATEGORY;
    /**
     * Enum for billing features.
     * Currently, these are only relevant for Google Play Android users:
     * https://developer.android.com/reference/com/android/billingclient/api/BillingClient.FeatureType
     */
    PurchasesOriginal.BILLING_FEATURE = BILLING_FEATURE;
    /**
     * Enum with possible return states for beginning refund request.
     * @readonly
     * @enum {string}
     */
    PurchasesOriginal.REFUND_REQUEST_STATUS = REFUND_REQUEST_STATUS;
    /**
     * Replace SKU's ProrationMode.
     *
     * @readonly
     * @enum {number}
     */
    PurchasesOriginal.PRORATION_MODE = PRORATION_MODE;
    /**
     * Enumeration of all possible Package types.
     *
     * @readonly
     * @enum {string}
     */
    PurchasesOriginal.PACKAGE_TYPE = PACKAGE_TYPE;
    /**
     * Enum of different possible states for intro price eligibility status.
     *
     * @readonly
     * @enum {number}
     */
    PurchasesOriginal.INTRO_ELIGIBILITY_STATUS = INTRO_ELIGIBILITY_STATUS;
    /**
     * Enum of different possible log levels.
     *
     * @readonly
     * @enum {string}
     */
    PurchasesOriginal.LOG_LEVEL = LOG_LEVEL;
    /**
     * Enum of different possible in-app message types.
     *
     * @readonly
     * @enum {string}
     */
    PurchasesOriginal.IN_APP_MESSAGE_TYPE = IN_APP_MESSAGE_TYPE;
    PurchasesOriginal.pluginName = "Purchases";
    PurchasesOriginal.plugin = "cordova-plugin-purchases@5.0.0";
    PurchasesOriginal.pluginRef = "Purchases";
    PurchasesOriginal.repo = "https://github.com/RevenueCat/cordova-plugin-purchases";
    PurchasesOriginal.platforms = ["Android", "iOS"];
    return PurchasesOriginal;
}(AwesomeCordovaNativePlugin));
var Purchases = new PurchasesOriginal();
export { Purchases };
//# sourceMappingURL=data:application/json;base64,