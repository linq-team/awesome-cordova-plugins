var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var CleverTapOriginal = /** @class */ (function (_super) {
    __extends(CleverTapOriginal, _super);
    function CleverTapOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CleverTapOriginal.prototype.notifyDeviceReady = function () { return cordova(this, "notifyDeviceReady", {}, arguments); };
    CleverTapOriginal.prototype.enablePersonalization = function () { return cordova(this, "enablePersonalization", {}, arguments); };
    CleverTapOriginal.prototype.disablePersonalization = function () { return cordova(this, "disablePersonalization", {}, arguments); };
    CleverTapOriginal.prototype.setOptOut = function (optOut) { return cordova(this, "setOptOut", {}, arguments); };
    CleverTapOriginal.prototype.setOffline = function (offline) { return cordova(this, "setOffline", {}, arguments); };
    CleverTapOriginal.prototype.enableDeviceNetworkInfoReporting = function (enable) { return cordova(this, "enableDeviceNetworkInfoReporting", {}, arguments); };
    CleverTapOriginal.prototype.setLocale = function (locale) { return cordova(this, "setLocale", {}, arguments); };
    CleverTapOriginal.prototype.registerPush = function () { return cordova(this, "registerPush", {}, arguments); };
    CleverTapOriginal.prototype.setPushToken = function (token) { return cordova(this, "setPushToken", {}, arguments); };
    CleverTapOriginal.prototype.setPushXiaomiToken = function (token, region) { return cordova(this, "setPushXiaomiToken", {}, arguments); };
    CleverTapOriginal.prototype.setPushBaiduToken = function (token) { return cordova(this, "setPushBaiduToken", {}, arguments); };
    CleverTapOriginal.prototype.setPushHuaweiToken = function (token) { return cordova(this, "setPushHuaweiToken", {}, arguments); };
    CleverTapOriginal.prototype.createNotification = function (extras) { return cordova(this, "createNotification", {}, arguments); };
    CleverTapOriginal.prototype.createNotificationChannel = function (channelID, channelName, channelDescription, importance, showBadge) { return cordova(this, "createNotificationChannel", {}, arguments); };
    CleverTapOriginal.prototype.createNotificationChannelWithSound = function (channelID, channelName, channelDescription, importance, showBadge, sound) { return cordova(this, "createNotificationChannelWithSound", {}, arguments); };
    CleverTapOriginal.prototype.createNotificationChannelWithGroupId = function (channelID, channelName, channelDescription, importance, groupId, showBadge) { return cordova(this, "createNotificationChannelWithGroupId", {}, arguments); };
    CleverTapOriginal.prototype.createNotificationChannelWithGroupIdAndSound = function (channelID, channelName, channelDescription, importance, groupId, showBadge, sound) { return cordova(this, "createNotificationChannelWithGroupIdAndSound", {}, arguments); };
    CleverTapOriginal.prototype.createNotificationChannelGroup = function (groupID, groupName) { return cordova(this, "createNotificationChannelGroup", {}, arguments); };
    CleverTapOriginal.prototype.deleteNotificationChannel = function (channelID) { return cordova(this, "deleteNotificationChannel", {}, arguments); };
    CleverTapOriginal.prototype.deleteNotificationChannelGroup = function (groupID) { return cordova(this, "deleteNotificationChannelGroup", {}, arguments); };
    CleverTapOriginal.prototype.recordScreenView = function (screenName) { return cordova(this, "recordScreenView", {}, arguments); };
    CleverTapOriginal.prototype.recordEventWithName = function (eventName) { return cordova(this, "recordEventWithName", {}, arguments); };
    CleverTapOriginal.prototype.recordEventWithNameAndProps = function (eventName, eventProps) { return cordova(this, "recordEventWithNameAndProps", {}, arguments); };
    CleverTapOriginal.prototype.recordChargedEventWithDetailsAndItems = function (details, items) { return cordova(this, "recordChargedEventWithDetailsAndItems", {}, arguments); };
    CleverTapOriginal.prototype.eventGetFirstTime = function (eventName) { return cordova(this, "eventGetFirstTime", {}, arguments); };
    CleverTapOriginal.prototype.eventGetLastTime = function (eventName) { return cordova(this, "eventGetLastTime", {}, arguments); };
    CleverTapOriginal.prototype.eventGetOccurrences = function (eventName) { return cordova(this, "eventGetOccurrences", {}, arguments); };
    CleverTapOriginal.prototype.eventGetDetails = function (eventName) { return cordova(this, "eventGetDetails", {}, arguments); };
    CleverTapOriginal.prototype.getEventHistory = function () { return cordova(this, "getEventHistory", {}, arguments); };
    CleverTapOriginal.prototype.getLocation = function () { return cordova(this, "getLocation", {}, arguments); };
    CleverTapOriginal.prototype.setLocation = function (lat, lon) { return cordova(this, "setLocation", {}, arguments); };
    CleverTapOriginal.prototype.onUserLogin = function (profile) { return cordova(this, "onUserLogin", {}, arguments); };
    CleverTapOriginal.prototype.profileSet = function (profile) { return cordova(this, "profileSet", {}, arguments); };
    CleverTapOriginal.prototype.profileGetProperty = function (propertyName) { return cordova(this, "profileGetProperty", {}, arguments); };
    CleverTapOriginal.prototype.profileGetCleverTapAttributionIdentifier = function () { return cordova(this, "profileGetCleverTapAttributionIdentifier", {}, arguments); };
    CleverTapOriginal.prototype.profileGetCleverTapID = function () { return cordova(this, "profileGetCleverTapID", {}, arguments); };
    CleverTapOriginal.prototype.getCleverTapID = function () { return cordova(this, "getCleverTapID", {}, arguments); };
    CleverTapOriginal.prototype.profileRemoveValueForKey = function (key) { return cordova(this, "profileRemoveValueForKey", {}, arguments); };
    CleverTapOriginal.prototype.profileSetMultiValues = function (key, values) { return cordova(this, "profileSetMultiValues", {}, arguments); };
    CleverTapOriginal.prototype.profileAddMultiValue = function (key, value) { return cordova(this, "profileAddMultiValue", {}, arguments); };
    CleverTapOriginal.prototype.profileAddMultiValues = function (key, values) { return cordova(this, "profileAddMultiValues", {}, arguments); };
    CleverTapOriginal.prototype.profileRemoveMultiValue = function (key, value) { return cordova(this, "profileRemoveMultiValue", {}, arguments); };
    CleverTapOriginal.prototype.profileRemoveMultiValues = function (key, values) { return cordova(this, "profileRemoveMultiValues", {}, arguments); };
    CleverTapOriginal.prototype.profileIncrementValueBy = function (key, value) { return cordova(this, "profileIncrementValueBy", {}, arguments); };
    CleverTapOriginal.prototype.profileDecrementValueBy = function (key, value) { return cordova(this, "profileDecrementValueBy", {}, arguments); };
    CleverTapOriginal.prototype.suspendInAppNotifications = function () { return cordova(this, "suspendInAppNotifications", {}, arguments); };
    CleverTapOriginal.prototype.discardInAppNotifications = function () { return cordova(this, "discardInAppNotifications", {}, arguments); };
    CleverTapOriginal.prototype.resumeInAppNotifications = function () { return cordova(this, "resumeInAppNotifications", {}, arguments); };
    CleverTapOriginal.prototype.clearInAppResources = function (expiredOnly) { return cordova(this, "clearInAppResources", {}, arguments); };
    CleverTapOriginal.prototype.fetchInApps = function () { return cordova(this, "fetchInApps", {}, arguments); };
    CleverTapOriginal.prototype.sessionGetTimeElapsed = function () { return cordova(this, "sessionGetTimeElapsed", {}, arguments); };
    CleverTapOriginal.prototype.sessionGetTotalVisits = function () { return cordova(this, "sessionGetTotalVisits", {}, arguments); };
    CleverTapOriginal.prototype.sessionGetScreenCount = function () { return cordova(this, "sessionGetScreenCount", {}, arguments); };
    CleverTapOriginal.prototype.sessionGetPreviousVisitTime = function () { return cordova(this, "sessionGetPreviousVisitTime", {}, arguments); };
    CleverTapOriginal.prototype.sessionGetUTMDetails = function () { return cordova(this, "sessionGetUTMDetails", {}, arguments); };
    CleverTapOriginal.prototype.pushInstallReferrer = function (source, medium, campaign) { return cordova(this, "pushInstallReferrer", {}, arguments); };
    CleverTapOriginal.prototype.initializeInbox = function () { return cordova(this, "initializeInbox", {}, arguments); };
    CleverTapOriginal.prototype.getInboxMessageUnreadCount = function () { return cordova(this, "getInboxMessageUnreadCount", {}, arguments); };
    CleverTapOriginal.prototype.getInboxMessageCount = function () { return cordova(this, "getInboxMessageCount", {}, arguments); };
    CleverTapOriginal.prototype.showInbox = function (styleConfig) { return cordova(this, "showInbox", {}, arguments); };
    CleverTapOriginal.prototype.getAllInboxMessages = function () { return cordova(this, "getAllInboxMessages", {}, arguments); };
    CleverTapOriginal.prototype.getUnreadInboxMessages = function () { return cordova(this, "getUnreadInboxMessages", {}, arguments); };
    CleverTapOriginal.prototype.getInboxMessageForId = function (messageId) { return cordova(this, "getInboxMessageForId", {}, arguments); };
    CleverTapOriginal.prototype.deleteInboxMessageForId = function (messageId) { return cordova(this, "deleteInboxMessageForId", {}, arguments); };
    CleverTapOriginal.prototype.deleteInboxMessagesForIds = function (messageIds) { return cordova(this, "deleteInboxMessagesForIds", {}, arguments); };
    CleverTapOriginal.prototype.markReadInboxMessageForId = function (messageId) { return cordova(this, "markReadInboxMessageForId", {}, arguments); };
    CleverTapOriginal.prototype.markReadInboxMessagesForIds = function (messageIds) { return cordova(this, "markReadInboxMessagesForIds", {}, arguments); };
    CleverTapOriginal.prototype.dismissInbox = function () { return cordova(this, "dismissInbox", {}, arguments); };
    CleverTapOriginal.prototype.pushInboxNotificationViewedEventForId = function (messageId) { return cordova(this, "pushInboxNotificationViewedEventForId", {}, arguments); };
    CleverTapOriginal.prototype.pushInboxNotificationClickedEventForId = function (messageId) { return cordova(this, "pushInboxNotificationClickedEventForId", {}, arguments); };
    CleverTapOriginal.prototype.getAllDisplayUnits = function () { return cordova(this, "getAllDisplayUnits", {}, arguments); };
    CleverTapOriginal.prototype.getDisplayUnitForId = function (id) { return cordova(this, "getDisplayUnitForId", {}, arguments); };
    CleverTapOriginal.prototype.pushDisplayUnitViewedEventForID = function (id) { return cordova(this, "pushDisplayUnitViewedEventForID", {}, arguments); };
    CleverTapOriginal.prototype.pushDisplayUnitClickedEventForID = function (id) { return cordova(this, "pushDisplayUnitClickedEventForID", {}, arguments); };
    CleverTapOriginal.prototype.getFeatureFlag = function (key, defaultValue) { return cordova(this, "getFeatureFlag", {}, arguments); };
    CleverTapOriginal.prototype.setDefaultsMap = function (defaults) { return cordova(this, "setDefaultsMap", {}, arguments); };
    CleverTapOriginal.prototype.fetch = function () { return cordova(this, "fetch", {}, arguments); };
    CleverTapOriginal.prototype.fetchWithMinimumFetchIntervalInSeconds = function (timeInterval) { return cordova(this, "fetchWithMinimumFetchIntervalInSeconds", {}, arguments); };
    CleverTapOriginal.prototype.activate = function () { return cordova(this, "activate", {}, arguments); };
    CleverTapOriginal.prototype.fetchAndActivate = function () { return cordova(this, "fetchAndActivate", {}, arguments); };
    CleverTapOriginal.prototype.setMinimumFetchIntervalInSeconds = function (timeInterval) { return cordova(this, "setMinimumFetchIntervalInSeconds", {}, arguments); };
    CleverTapOriginal.prototype.getLastFetchTimeStampInMillis = function () { return cordova(this, "getLastFetchTimeStampInMillis", {}, arguments); };
    CleverTapOriginal.prototype.getString = function (key) { return cordova(this, "getString", {}, arguments); };
    CleverTapOriginal.prototype.getBoolean = function (key) { return cordova(this, "getBoolean", {}, arguments); };
    CleverTapOriginal.prototype.getLong = function (key) { return cordova(this, "getLong", {}, arguments); };
    CleverTapOriginal.prototype.getDouble = function (key) { return cordova(this, "getDouble", {}, arguments); };
    CleverTapOriginal.prototype.reset = function () { return cordova(this, "reset", {}, arguments); };
    CleverTapOriginal.prototype.syncVariables = function () { return cordova(this, "syncVariables", {}, arguments); };
    CleverTapOriginal.prototype.syncVariablesinProd = function (isProduction) { return cordova(this, "syncVariablesinProd", {}, arguments); };
    CleverTapOriginal.prototype.fetchVariables = function () { return cordova(this, "fetchVariables", {}, arguments); };
    CleverTapOriginal.prototype.defineVariables = function (variables) { return cordova(this, "defineVariables", {}, arguments); };
    CleverTapOriginal.prototype.getVariable = function (name) { return cordova(this, "getVariable", {}, arguments); };
    CleverTapOriginal.prototype.getVariables = function () { return cordova(this, "getVariables", {}, arguments); };
    CleverTapOriginal.prototype.onVariablesChanged = function () { return cordova(this, "onVariablesChanged", {}, arguments); };
    CleverTapOriginal.prototype.onValueChanged = function (name) { return cordova(this, "onValueChanged", {}, arguments); };
    CleverTapOriginal.prototype.promptPushPrimer = function (localInAppObject) { return cordova(this, "promptPushPrimer", {}, arguments); };
    CleverTapOriginal.prototype.promptForPushPermission = function (showFallbackSettings) { return cordova(this, "promptForPushPermission", {}, arguments); };
    CleverTapOriginal.prototype.isPushPermissionGranted = function () { return cordova(this, "isPushPermissionGranted", {}, arguments); };
    CleverTapOriginal.prototype.setDebugLevel = function (level) { return cordova(this, "setDebugLevel", {}, arguments); };
    CleverTapOriginal.pluginName = "CleverTap";
    CleverTapOriginal.plugin = "clevertap-cordova";
    CleverTapOriginal.pluginRef = "CleverTap";
    CleverTapOriginal.repo = "https://github.com/CleverTap/clevertap-cordova";
    CleverTapOriginal.platforms = ["Android", "iOS"];
    return CleverTapOriginal;
}(AwesomeCordovaNativePlugin));
var CleverTap = new CleverTapOriginal();
export { CleverTap };
//# sourceMappingURL=data:application/json;base64,