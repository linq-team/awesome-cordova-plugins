var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
export var RenderingMode;
(function (RenderingMode) {
    RenderingMode[RenderingMode["NO_RENDERING"] = 0] = "NO_RENDERING";
    RenderingMode[RenderingMode["NATIVE"] = 1] = "NATIVE";
    RenderingMode[RenderingMode["WIREFRAME"] = 2] = "WIREFRAME";
})(RenderingMode || (RenderingMode = {}));
export var RecordingStatus;
(function (RecordingStatus) {
    RecordingStatus[RecordingStatus["Recording"] = 0] = "Recording";
    RecordingStatus[RecordingStatus["NotStarted"] = 1] = "NotStarted";
    RecordingStatus[RecordingStatus["Stopped"] = 2] = "Stopped";
    RecordingStatus[RecordingStatus["BellowMinSdkVersion"] = 3] = "BellowMinSdkVersion";
    RecordingStatus[RecordingStatus["ProjectLimitReached"] = 4] = "ProjectLimitReached";
    RecordingStatus[RecordingStatus["StorageLimitReached"] = 5] = "StorageLimitReached";
    RecordingStatus[RecordingStatus["InternalError"] = 6] = "InternalError";
    RecordingStatus[RecordingStatus["NotRunningInSwiftUIContext"] = 7] = "NotRunningInSwiftUIContext";
    RecordingStatus[RecordingStatus["UnsupportedPlatform"] = 8] = "UnsupportedPlatform";
})(RecordingStatus || (RecordingStatus = {}));
var SmartlookOriginal = /** @class */ (function (_super) {
    __extends(SmartlookOriginal, _super);
    function SmartlookOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SmartlookOriginal.prototype.start = function () { return cordova(this, "start", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.stop = function () { return cordova(this, "stop", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.reset = function () { return cordova(this, "reset", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.trackEvent = function (options) { return cordova(this, "trackEvent", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.trackSelector = function (options) { return cordova(this, "trackSelector", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.trackNavigationEnter = function (options) { return cordova(this, "trackNavigationEnter", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.trackNavigationExit = function (options) { return cordova(this, "trackNavigationExit", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.setReferrer = function (options) { return cordova(this, "setReferrer", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.putGlobalEventProperty = function (options) { return cordova(this, "putGlobalEventProperty", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.getGlobalEventProperty = function (options) { return cordova(this, "getGlobalEventProperty", {}, arguments); };
    SmartlookOriginal.prototype.removeGlobalEventProperty = function (options) { return cordova(this, "removeGlobalEventProperty", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.clearGlobalEventProperties = function () { return cordova(this, "clearGlobalEventProperties", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.setUserIdentifier = function (options) { return cordova(this, "setUserIdentifier", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.setUserName = function (options) { return cordova(this, "setUserName", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.setUserEmail = function (options) { return cordova(this, "setUserEmail", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.setUserProperty = function (options) { return cordova(this, "setUserProperty", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.getUserProperty = function (options) { return cordova(this, "getUserProperty", {}, arguments); };
    SmartlookOriginal.prototype.removeUserProperty = function (options) { return cordova(this, "removeUserProperty", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.openNewUser = function () { return cordova(this, "openNewUser", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.openNewSession = function () { return cordova(this, "openNewSession", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.getUserUrl = function () { return cordova(this, "getUserUrl", {}, arguments); };
    SmartlookOriginal.prototype.getSessionUrl = function () { return cordova(this, "getSessionUrl", {}, arguments); };
    SmartlookOriginal.prototype.getSessionUrlWithTimestamp = function () { return cordova(this, "getSessionUrlWithTimestamp", {}, arguments); };
    SmartlookOriginal.prototype.setRelayProxyHost = function (options) { return cordova(this, "setRelayProxyHost", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.setFrameRate = function (options) { return cordova(this, "setFrameRate", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.getFrameRate = function () { return cordova(this, "getFrameRate", {}, arguments); };
    SmartlookOriginal.prototype.setJobUploadEnabled = function (options) { return cordova(this, "setJobUploadEnabled", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.setAdaptiveFrameRateEnabled = function (options) { return cordova(this, "setAdaptiveFrameRateEnabled", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.getAdaptiveFrameRateEnabled = function () { return cordova(this, "getAdaptiveFrameRateEnabled", {}, arguments); };
    SmartlookOriginal.prototype.eventTrackingEnableAll = function () { return cordova(this, "eventTrackingEnableAll", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.eventTrackingDisableAll = function () { return cordova(this, "eventTrackingDisableAll", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.setProjectKey = function (options) { return cordova(this, "setProjectKey", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.isRecording = function () { return cordova(this, "isRecording", {}, arguments); };
    SmartlookOriginal.prototype.getProjectKey = function () { return cordova(this, "getProjectKey", {}, arguments); };
    SmartlookOriginal.prototype.setEventTrackingInteractionUserStatus = function (options) { return cordova(this, "setEventTrackingInteractionUserStatus", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.setEventTrackingInteractionRageClickStatus = function (options) { return cordova(this, "setEventTrackingInteractionRageClickStatus", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.restoreDefault = function () { return cordova(this, "restoreDefault", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.setWebViewSensitivity = function (options) { return cordova(this, "setWebViewSensitivity", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.getRenderingMode = function () { return cordova(this, "getRenderingMode", {}, arguments); };
    SmartlookOriginal.prototype.getRecordingStatus = function () { return cordova(this, "getRecordingStatus", {}, arguments); };
    SmartlookOriginal.prototype.getStateFrameRate = function () { return cordova(this, "getStateFrameRate", {}, arguments); };
    SmartlookOriginal.prototype.setRenderingMode = function (options) { return cordova(this, "setRenderingMode", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.registerUserUrlChangedListener = function (options) { return cordova(this, "registerUserUrlChangedListener", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.registerSessionUrlChangedListener = function (options) { return cordova(this, "registerSessionUrlChangedListener", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.registerRenderingModeChangedListener = function (options) { return cordova(this, "registerRenderingModeChangedListener", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.registerRecordingStatusChangedListener = function (options) { return cordova(this, "registerRecordingStatusChangedListener", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.removeUserUrlChangedListener = function () { return cordova(this, "removeUserUrlChangedListener", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.removeSessionUrlChangedListener = function () { return cordova(this, "removeSessionUrlChangedListener", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.removeRenderingModeChangedListener = function () { return cordova(this, "removeRenderingModeChangedListener", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.removeRecordingStatusChangedListener = function () { return cordova(this, "removeRecordingStatusChangedListener", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.setRecordingMask = function (options) { return cordova(this, "setRecordingMask", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.enableLogs = function () { return cordova(this, "enableLogs", { "sync": true }, arguments); };
    SmartlookOriginal.pluginName = "Smartlook";
    SmartlookOriginal.plugin = "https://github.com/smartlook/cordova-smartlook.git";
    SmartlookOriginal.pluginRef = "cordova.plugins.SmartlookPlugin";
    SmartlookOriginal.repo = "https://github.com/smartlook/cordova-smartlook.git";
    SmartlookOriginal.platforms = ["Android", "iOS"];
    return SmartlookOriginal;
}(AwesomeCordovaNativePlugin));
var Smartlook = new SmartlookOriginal();
export { Smartlook };
//# sourceMappingURL=data:application/json;base64,