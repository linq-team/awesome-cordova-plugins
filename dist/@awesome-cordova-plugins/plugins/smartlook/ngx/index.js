import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import * as i0 from "@angular/core";
export var RenderingMode;
(function (RenderingMode) {
    RenderingMode[RenderingMode["NO_RENDERING"] = 0] = "NO_RENDERING";
    RenderingMode[RenderingMode["NATIVE"] = 1] = "NATIVE";
    RenderingMode[RenderingMode["WIREFRAME"] = 2] = "WIREFRAME";
})(RenderingMode || (RenderingMode = {}));
export var RecordingStatus;
(function (RecordingStatus) {
    RecordingStatus[RecordingStatus["Recording"] = 0] = "Recording";
    RecordingStatus[RecordingStatus["NotStarted"] = 1] = "NotStarted";
    RecordingStatus[RecordingStatus["Stopped"] = 2] = "Stopped";
    RecordingStatus[RecordingStatus["BellowMinSdkVersion"] = 3] = "BellowMinSdkVersion";
    RecordingStatus[RecordingStatus["ProjectLimitReached"] = 4] = "ProjectLimitReached";
    RecordingStatus[RecordingStatus["StorageLimitReached"] = 5] = "StorageLimitReached";
    RecordingStatus[RecordingStatus["InternalError"] = 6] = "InternalError";
    RecordingStatus[RecordingStatus["NotRunningInSwiftUIContext"] = 7] = "NotRunningInSwiftUIContext";
    RecordingStatus[RecordingStatus["UnsupportedPlatform"] = 8] = "UnsupportedPlatform";
})(RecordingStatus || (RecordingStatus = {}));
var Smartlook = /** @class */ (function (_super) {
    __extends(Smartlook, _super);
    function Smartlook() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Smartlook.prototype.start = function () { return cordova(this, "start", { "sync": true }, arguments); };
    Smartlook.prototype.stop = function () { return cordova(this, "stop", { "sync": true }, arguments); };
    Smartlook.prototype.reset = function () { return cordova(this, "reset", { "sync": true }, arguments); };
    Smartlook.prototype.trackEvent = function (options) { return cordova(this, "trackEvent", { "sync": true }, arguments); };
    Smartlook.prototype.trackSelector = function (options) { return cordova(this, "trackSelector", { "sync": true }, arguments); };
    Smartlook.prototype.trackNavigationEnter = function (options) { return cordova(this, "trackNavigationEnter", { "sync": true }, arguments); };
    Smartlook.prototype.trackNavigationExit = function (options) { return cordova(this, "trackNavigationExit", { "sync": true }, arguments); };
    Smartlook.prototype.setReferrer = function (options) { return cordova(this, "setReferrer", { "sync": true }, arguments); };
    Smartlook.prototype.putGlobalEventProperty = function (options) { return cordova(this, "putGlobalEventProperty", { "sync": true }, arguments); };
    Smartlook.prototype.getGlobalEventProperty = function (options) { return cordova(this, "getGlobalEventProperty", {}, arguments); };
    Smartlook.prototype.removeGlobalEventProperty = function (options) { return cordova(this, "removeGlobalEventProperty", { "sync": true }, arguments); };
    Smartlook.prototype.clearGlobalEventProperties = function () { return cordova(this, "clearGlobalEventProperties", { "sync": true }, arguments); };
    Smartlook.prototype.setUserIdentifier = function (options) { return cordova(this, "setUserIdentifier", { "sync": true }, arguments); };
    Smartlook.prototype.setUserName = function (options) { return cordova(this, "setUserName", { "sync": true }, arguments); };
    Smartlook.prototype.setUserEmail = function (options) { return cordova(this, "setUserEmail", { "sync": true }, arguments); };
    Smartlook.prototype.setUserProperty = function (options) { return cordova(this, "setUserProperty", { "sync": true }, arguments); };
    Smartlook.prototype.getUserProperty = function (options) { return cordova(this, "getUserProperty", {}, arguments); };
    Smartlook.prototype.removeUserProperty = function (options) { return cordova(this, "removeUserProperty", { "sync": true }, arguments); };
    Smartlook.prototype.openNewUser = function () { return cordova(this, "openNewUser", { "sync": true }, arguments); };
    Smartlook.prototype.openNewSession = function () { return cordova(this, "openNewSession", { "sync": true }, arguments); };
    Smartlook.prototype.getUserUrl = function () { return cordova(this, "getUserUrl", {}, arguments); };
    Smartlook.prototype.getSessionUrl = function () { return cordova(this, "getSessionUrl", {}, arguments); };
    Smartlook.prototype.getSessionUrlWithTimestamp = function () { return cordova(this, "getSessionUrlWithTimestamp", {}, arguments); };
    Smartlook.prototype.setRelayProxyHost = function (options) { return cordova(this, "setRelayProxyHost", { "sync": true }, arguments); };
    Smartlook.prototype.setFrameRate = function (options) { return cordova(this, "setFrameRate", { "sync": true }, arguments); };
    Smartlook.prototype.getFrameRate = function () { return cordova(this, "getFrameRate", {}, arguments); };
    Smartlook.prototype.setJobUploadEnabled = function (options) { return cordova(this, "setJobUploadEnabled", { "sync": true }, arguments); };
    Smartlook.prototype.setAdaptiveFrameRateEnabled = function (options) { return cordova(this, "setAdaptiveFrameRateEnabled", { "sync": true }, arguments); };
    Smartlook.prototype.getAdaptiveFrameRateEnabled = function () { return cordova(this, "getAdaptiveFrameRateEnabled", {}, arguments); };
    Smartlook.prototype.eventTrackingEnableAll = function () { return cordova(this, "eventTrackingEnableAll", { "sync": true }, arguments); };
    Smartlook.prototype.eventTrackingDisableAll = function () { return cordova(this, "eventTrackingDisableAll", { "sync": true }, arguments); };
    Smartlook.prototype.setProjectKey = function (options) { return cordova(this, "setProjectKey", { "sync": true }, arguments); };
    Smartlook.prototype.isRecording = function () { return cordova(this, "isRecording", {}, arguments); };
    Smartlook.prototype.getProjectKey = function () { return cordova(this, "getProjectKey", {}, arguments); };
    Smartlook.prototype.setEventTrackingInteractionUserStatus = function (options) { return cordova(this, "setEventTrackingInteractionUserStatus", { "sync": true }, arguments); };
    Smartlook.prototype.setEventTrackingInteractionRageClickStatus = function (options) { return cordova(this, "setEventTrackingInteractionRageClickStatus", { "sync": true }, arguments); };
    Smartlook.prototype.restoreDefault = function () { return cordova(this, "restoreDefault", { "sync": true }, arguments); };
    Smartlook.prototype.setWebViewSensitivity = function (options) { return cordova(this, "setWebViewSensitivity", { "sync": true }, arguments); };
    Smartlook.prototype.getRenderingMode = function () { return cordova(this, "getRenderingMode", {}, arguments); };
    Smartlook.prototype.getRecordingStatus = function () { return cordova(this, "getRecordingStatus", {}, arguments); };
    Smartlook.prototype.getStateFrameRate = function () { return cordova(this, "getStateFrameRate", {}, arguments); };
    Smartlook.prototype.setRenderingMode = function (options) { return cordova(this, "setRenderingMode", { "sync": true }, arguments); };
    Smartlook.prototype.registerUserUrlChangedListener = function (options) { return cordova(this, "registerUserUrlChangedListener", { "sync": true }, arguments); };
    Smartlook.prototype.registerSessionUrlChangedListener = function (options) { return cordova(this, "registerSessionUrlChangedListener", { "sync": true }, arguments); };
    Smartlook.prototype.registerRenderingModeChangedListener = function (options) { return cordova(this, "registerRenderingModeChangedListener", { "sync": true }, arguments); };
    Smartlook.prototype.registerRecordingStatusChangedListener = function (options) { return cordova(this, "registerRecordingStatusChangedListener", { "sync": true }, arguments); };
    Smartlook.prototype.removeUserUrlChangedListener = function () { return cordova(this, "removeUserUrlChangedListener", { "sync": true }, arguments); };
    Smartlook.prototype.removeSessionUrlChangedListener = function () { return cordova(this, "removeSessionUrlChangedListener", { "sync": true }, arguments); };
    Smartlook.prototype.removeRenderingModeChangedListener = function () { return cordova(this, "removeRenderingModeChangedListener", { "sync": true }, arguments); };
    Smartlook.prototype.removeRecordingStatusChangedListener = function () { return cordova(this, "removeRecordingStatusChangedListener", { "sync": true }, arguments); };
    Smartlook.prototype.setRecordingMask = function (options) { return cordova(this, "setRecordingMask", { "sync": true }, arguments); };
    Smartlook.prototype.enableLogs = function () { return cordova(this, "enableLogs", { "sync": true }, arguments); };
    Smartlook.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: Smartlook, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
    Smartlook.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: Smartlook });
    Smartlook.pluginName = "Smartlook";
    Smartlook.plugin = "https://github.com/smartlook/cordova-smartlook.git";
    Smartlook.pluginRef = "cordova.plugins.SmartlookPlugin";
    Smartlook.repo = "https://github.com/smartlook/cordova-smartlook.git";
    Smartlook.platforms = ["Android", "iOS"];
    Smartlook = __decorate([], Smartlook);
    return Smartlook;
}(AwesomeCordovaNativePlugin));
export { Smartlook };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: Smartlook, decorators: [{
            type: Injectable
        }], propDecorators: { start: [], stop: [], reset: [], trackEvent: [], trackSelector: [], trackNavigationEnter: [], trackNavigationExit: [], setReferrer: [], putGlobalEventProperty: [], getGlobalEventProperty: [], removeGlobalEventProperty: [], clearGlobalEventProperties: [], setUserIdentifier: [], setUserName: [], setUserEmail: [], setUserProperty: [], getUserProperty: [], removeUserProperty: [], openNewUser: [], openNewSession: [], getUserUrl: [], getSessionUrl: [], getSessionUrlWithTimestamp: [], setRelayProxyHost: [], setFrameRate: [], getFrameRate: [], setJobUploadEnabled: [], setAdaptiveFrameRateEnabled: [], getAdaptiveFrameRateEnabled: [], eventTrackingEnableAll: [], eventTrackingDisableAll: [], setProjectKey: [], isRecording: [], getProjectKey: [], setEventTrackingInteractionUserStatus: [], setEventTrackingInteractionRageClickStatus: [], restoreDefault: [], setWebViewSensitivity: [], getRenderingMode: [], getRecordingStatus: [], getStateFrameRate: [], setRenderingMode: [], registerUserUrlChangedListener: [], registerSessionUrlChangedListener: [], registerRenderingModeChangedListener: [], registerRecordingStatusChangedListener: [], removeUserUrlChangedListener: [], removeSessionUrlChangedListener: [], removeRenderingModeChangedListener: [], removeRecordingStatusChangedListener: [], setRecordingMask: [], enableLogs: [] } });
//# sourceMappingURL=data:application/json;base64,