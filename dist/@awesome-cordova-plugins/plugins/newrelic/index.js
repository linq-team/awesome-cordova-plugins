var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var NewRelicOriginal = /** @class */ (function (_super) {
    __extends(NewRelicOriginal, _super);
    function NewRelicOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NewRelicOriginal.prototype.setUserId = function (userId) { return cordova(this, "setUserId", { "sync": true }, arguments); };
    NewRelicOriginal.prototype.setAttribute = function (name, value) { return cordova(this, "setAttribute", { "sync": true }, arguments); };
    NewRelicOriginal.prototype.removeAttribute = function (name) { return cordova(this, "removeAttribute", { "sync": true }, arguments); };
    NewRelicOriginal.prototype.recordBreadcrumb = function (name, eventAttributes) { return cordova(this, "recordBreadcrumb", { "sync": true }, arguments); };
    NewRelicOriginal.prototype.recordCustomEvent = function (eventType, eventName, eventAttributes) { return cordova(this, "recordCustomEvent", { "sync": true }, arguments); };
    NewRelicOriginal.prototype.startInteraction = function (name) { return cordova(this, "startInteraction", { "sync": true }, arguments); };
    NewRelicOriginal.prototype.endInteraction = function (name) { return cordova(this, "endInteraction", { "sync": true }, arguments); };
    NewRelicOriginal.prototype.crashNow = function (message) { return cordova(this, "crashNow", { "sync": true }, arguments); };
    NewRelicOriginal.prototype.currentSessionId = function (name) { return cordova(this, "currentSessionId", { "sync": true }, arguments); };
    NewRelicOriginal.prototype.incrementAttribute = function (name, value) { return cordova(this, "incrementAttribute", { "sync": true }, arguments); };
    NewRelicOriginal.prototype.recordMetric = function (name, category, value, countUnit, valueUnit) { return cordova(this, "recordMetric", { "sync": true }, arguments); };
    NewRelicOriginal.prototype.removeAllAttributes = function () { return cordova(this, "removeAllAttributes", { "sync": true }, arguments); };
    NewRelicOriginal.prototype.setMaxEventPoolSize = function (maxPoolSize) { return cordova(this, "setMaxEventPoolSize", { "sync": true }, arguments); };
    NewRelicOriginal.prototype.setMaxEventBufferTime = function (maxBufferTimeInSeconds) { return cordova(this, "setMaxEventBufferTime", { "sync": true }, arguments); };
    NewRelicOriginal.prototype.analyticsEventEnabled = function (enabled) { return cordova(this, "analyticsEventEnabled", { "sync": true }, arguments); };
    NewRelicOriginal.prototype.networkRequestEnabled = function (enabled) { return cordova(this, "networkRequestEnabled", { "sync": true }, arguments); };
    NewRelicOriginal.prototype.networkErrorRequestEnabled = function (enabled) { return cordova(this, "networkErrorRequestEnabled", { "sync": true }, arguments); };
    NewRelicOriginal.prototype.httpRequestBodyCaptureEnabled = function (enabled) { return cordova(this, "httpRequestBodyCaptureEnabled", { "sync": true }, arguments); };
    NewRelicOriginal.prototype.noticeHttpTransaction = function (url, method, status, startTime, endTime, bytesSent, bytesReceived, body) { return cordova(this, "noticeHttpTransaction", { "sync": true }, arguments); };
    NewRelicOriginal.prototype.noticeNetworkFailure = function (url, method, startTime, endTime, failure) { return cordova(this, "noticeNetworkFailure", { "sync": true }, arguments); };
    NewRelicOriginal.prototype.recordError = function (err) { return cordova(this, "recordError", { "sync": true }, arguments); };
    NewRelicOriginal.prototype.shutdown = function () { return cordova(this, "shutdown", { "sync": true }, arguments); };
    NewRelicOriginal.pluginName = "NewRelic";
    NewRelicOriginal.plugin = "newrelic-cordova-plugin";
    NewRelicOriginal.pluginRef = "NewRelic";
    NewRelicOriginal.repo = "https://github.com/newrelic/newrelic-cordova-plugin";
    NewRelicOriginal.install = "ionic cordova plugin add https://github.com/newrelic/newrelic-cordova-plugin.git --variable IOS_APP_TOKEN=\"{ios-app-token}\" --variable ANDROID_APP_TOKEN=\"{android-app-token}\"";
    NewRelicOriginal.installVariables = ["IOS_APP_TOKEN", "ANDROID_APP_TOKEN"];
    NewRelicOriginal.platforms = ["Android", "iOS"];
    return NewRelicOriginal;
}(AwesomeCordovaNativePlugin));
var NewRelic = new NewRelicOriginal();
export { NewRelic };
//# sourceMappingURL=data:application/json;base64,